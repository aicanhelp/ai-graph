#version 460 core
#extension GL_NV_mesh_shader : enable
#extension GL_NV_gpu_shader5 : enable

precision highp float;
precision highp int;
layout(std140, column_major) uniform;
layout(std430, column_major) buffer;

layout(local_size_x = 4) in;
layout(max_vertices = 4, max_primitives = 2) out;
layout(triangles) out;

taskNV in task
{
	uint ObjectIndex;
} In;

out uint gl_PrimitiveCountNV;
out uint gl_PrimitiveIndicesNV[];

layout(binding = 0) uniform transform
{
	mat4 VP;
} Transform;

layout(std430, binding = 0) buffer element
{
	uint8_t Data[];
} Element;

struct attribData
{
	vec2 Position;
	vec2 Texcoord;
};

layout(std430, binding = 1) buffer vertex
{
	attribData Data[];
} Vertex;

struct chunkData
{
	uint BaseVertex;
	uint BaseElement;
	uint8_t ElementCount;
	uint8_t PrimitiveCount;
	uint8_t ObjectIndex;
	uint8_t Padding;
};

layout(std430, binding = 2) buffer chunk
{
	chunkData Data[];
} Chunk;

struct objectData
{
	mat4 M;
};

layout(std430, binding = 3) buffer object
{
	objectData Data[];
} Object;

out gl_MeshPerVertexNV
{
	vec4  gl_Position;
} gl_MeshVerticesNV[];

out block
{
	vec2 Texcoord;
} Out[];

void main()
{
	chunkData Chunk = Chunk.Data[gl_WorkGroupID.x];
	if (gl_LocalInvocationID.x == 0)
		gl_PrimitiveCountNV = Chunk.PrimitiveCount;

	for (uint i = 0; i < Chunk.ElementCount; ++i)
		gl_PrimitiveIndicesNV[i] = (uint)Element.Data[Chunk.BaseElement + i];

	mat4 MVP = Transform.VP * Object.Data[Chunk.ObjectIndex].M;

	attribData Attrib = Vertex.Data[Chunk.BaseVertex + gl_LocalInvocationID.x];
	Out[gl_LocalInvocationID.x].Texcoord = Attrib.Texcoord;
	gl_MeshVerticesNV[gl_LocalInvocationID.x].gl_Position = MVP * vec4(Attrib.Position, 0.0, 1.0);
}
